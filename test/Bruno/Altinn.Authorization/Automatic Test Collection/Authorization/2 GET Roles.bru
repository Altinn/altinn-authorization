meta {
  name: 2 GET Roles
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/authorization/api/v1/roles?coveredbyuserid={{auth_userId}}&offeredbypartyid={{auth_partyId}}
  body: none
  auth: inherit
}

headers {
  Accept: application/json
  Ocp-Apim-Subscription-Key: {{process.env.APIM_SUBSCRIPTION_KEY}}
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/Authorization/sharedtestdata.json`);
  
  bru.setVar("auth_userId", testdata.org1.dagl.userid);
  bru.setVar("auth_partyId", testdata.org1.dagl.partyid);
  
  var getTokenParameters = {
    auth_userId: testdata.org1.dagl.userid,
    auth_partyId: testdata.org1.dagl.partyid,
    auth_ssn: testdata.org1.dagl.pid,
    party: testdata.org1.partyid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.read
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  
  bru.setVar("bearerToken",  token);
  
  
}

script:post-response {
  console.log("request url (after): " + req.getUrl());
}

tests {
  
  test("Get roles of the user itself", function() {
    const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data).to.not.be.empty;
  
  });
}

docs {
  Get roles of the user itself
}
