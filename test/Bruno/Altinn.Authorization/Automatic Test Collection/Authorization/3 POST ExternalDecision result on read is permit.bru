meta {
  name: 3 POST ExternalDecision result on read is permit
  type: http
  seq: 7
}

post {
  url: {{baseUrl}}/authorization/api/v1/authorize
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Ocp-Apim-Subscription-Key: {{appsAccessKey}}
}

body:json {
  {
    "Request": {
      "ReturnPolicyIdList": true,
      "AccessSubject": [
        {
          "Attribute": [
            {
              "AttributeId": "urn:altinn:person:identifier-no",
              "Value": "13896998948"
            }
          ]
        }
      ],
      "Action": [
        {
          "Attribute": [
            {
              "AttributeId": "urn:oasis:names:tc:xacml:1.0:action:action-id",
              "Value": "read",
              "DataType": "http://www.w3.org/2001/XMLSchema#string"
            }
          ]
        }
      ],
      "Resource": [
        {
          "Attribute": [
            {
              "AttributeId": "urn:altinn:resource",
              "Value": "altinn_access_management"
            },
            {
              "AttributeId": "urn:altinn:organization:identifier-no",
              "Value": "312824450"
            }
          ]
        }
      ]
    }
  }
}

vars:pre-request {
  scope: altinn:instances.read
  auth_tokenType: Enterprise
  auth_userId: 
  auth_scopes: altinn:authorization:pdp
  auth_partyId: 
  auth_ssn: 
  party: 
  apps_access_key: 
  auth_org: digdir
  auth_orgNo: 991825827
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
  bru.setVar("auth_userId", testdata.org1.dagl.userid);
  bru.setVar("auth_partyId", testdata.org1.dagl.partyid);
  bru.setVar("auth_ssn", testdata.org1.dagl.pid);
  bru.setVar("party", testdata.org1.partyid);
  bru.setVar("appsAccessKey", bru.getEnvVar("appsAccessKey"));
  
  await testTokenGenerator.getToken();
}

script:post-response {
  console.log("request url (after): " + req.getUrl());
}

tests {
  
  test("3 POST Decision result on read is permit", function() {
    const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.response[0]).to.have.property('decision', "Permit");
  });
}

docs {
  Get a decision from PDP with appOwner details and validate response to have Permit.
  
  AccessSubject: ['urn:altinn:org']
  
  Action: ['read']
  
  Resource: ['urn:altinn:app', 'urn:altinn:org']
}
