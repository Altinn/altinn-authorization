meta {
  name: AccessList_AC4_Delegation_Deny
  type: http
  seq: 9
}

post {
  url: {{baseUrl}}/authorization/api/v1/authorize
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Ocp-Apim-Subscription-Key: {{apimSubscriptionKey}}
}

body:json {
  /*
  See Docs tab for test case description
  */
  {
      "Request": {
          "ReturnPolicyIdList": false,
          "AccessSubject": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:person:identifier-no",
                          "Value": "08827798585"
                      }
                  ]
              }
          ],
          "Action": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:oasis:names:tc:xacml:1.0:action:action-id",
                          "Value": "write",
                          "DataType": "http://www.w3.org/2001/XMLSchema#string"
                      }
                  ]
              }
          ],
          "Resource": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:resource",
                          "Value": "devtest_gar_bruno_accesslist_actionfilter"
                      },
                      {
                          "AttributeId": "urn:altinn:organization:identifier-no",
                          "Value": "313776735",
                          "DataType": "http://www.w3.org/2001/XMLSchema#string"
                      }
                  ]
              }
          ]
      }
  }
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/Authorization/sharedtestdata.json`);
  
  var getTokenParameters = {
    auth_tokenType: sharedtestdata.authTokenType.enterprise,
    auth_scopes: sharedtestdata.auth_scopes.authorize,
    auth_org: "digdir",
    auth_orgNo: "991825827"
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  
  bru.setVar("bearerToken",  token);
}

script:post-response {
  //console.log("request url (after): " + req.getUrl());
}

tests {
  
  test("POST Authorize AccessList_AC4_Deny result", function() {
    const testdata = require(`./Testdata/Authorization/${bru.getEnvVar("tokenEnv")}testdata.json`);
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.response[0]).to.have.property('decision', "Deny");
  });
}

docs {
  Issue:
  https://github.com/Altinn/altinn-access-management/issues/748
  
  Acceptance Criteria:
  AC4 - Avgiver med Tilgangssliste tilgang med action filter - Deny
  
  GITT en bruker med tilgang til ressurs for avgiver gjennom rolle eller enkeltdelegering
  NÅR ressursen krever tilgangsliste autorisasjon
  OG avgiver er medlem av minst en tilgangsliste som er knytt til ressursen
  OG tilgangslisten for ressursen har action filter begrensning som IKKE matcher action brukeren skal autoriseres for
  SÅ skal bruker få Deny
  
  Scenario/Testdata setup:
  The user has received delegation of both read and write action for the resource from the party.
  The party have access list membership for the resource with action filter for the action: read.
}
