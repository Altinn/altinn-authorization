meta {
  name: Instance_P2P_AC2_MissingInstId_NotApplicable
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}/authorization/api/v1/authorize
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Ocp-Apim-Subscription-Key: {{apimSubscriptionKey}}
}

body:json {
  {
      "Request": {
          "ReturnPolicyIdList": false,
          "AccessSubject": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:person:identifier-no",
                          "Value": "{{subject}}"
                      }
                  ]
              }
          ],
          "Action": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:oasis:names:tc:xacml:1.0:action:action-id",
                          "Value": "read"
                      }
                  ]
              }
          ],
          "Resource": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:person:identifier-no",
                          "Value": "{{resourceParty}}"
                      },
                      {
                          "AttributeId": "urn:altinn:resource",
                          "Value": "{{resourceId}}"
                      },
                      {
                          "AttributeId": "urn:altinn:task",
                          "Value": "task_1"
                      }
                  ]
              }
          ]
      }
  }
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/shared.json`);
  const testdata = require(`./Testdata/InstanceDelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  // Should be the same as the .bru request file. Used as Test-name Tests tab and shows in test result.
  bru.setVar("requestName", "Instance_P2P_AC2_MissingInstId_NotApplicable");
  
  bru.setVar("resourceId",  testdata.resources.appInstanceDelegation.resourceId);
  bru.setVar("subject",  testdata.persons.hakkeDyr.personId);
  bru.setVar("resourceParty",  testdata.persons.ovelseEmpirisk.personId);
  
  var getTokenParameters = {
    auth_tokenType: sharedtestdata.authTokenType.enterprise,
    auth_scopes: sharedtestdata.auth_scopes.authorize,
    auth_org: sharedtestdata.serviceOwners.ttd.org,
    auth_orgNo: sharedtestdata.serviceOwners.ttd.orgno,
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  test(bru.getVar("requestName"), function() {
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.response[0]).to.have.property('decision', "NotApplicable");
  });
}
