meta {
  name: AccessList_AC1_Permit
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/authorization/api/v1/authorize
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Ocp-Apim-Subscription-Key: {{apimSubscriptionKey}}
}

body:json {
  /*
  See Docs tab for test case description
  */
  {
      "Request": {
          "ReturnPolicyIdList": false,
          "AccessSubject": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:person:identifier-no",
                          "Value": "12819498464"
                      }
                  ]
              }
          ],
          "Action": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:oasis:names:tc:xacml:1.0:action:action-id",
                          "Value": "write",
                          "DataType": "http://www.w3.org/2001/XMLSchema#string"
                      }
                  ]
              }
          ],
          "Resource": [
              {
                  "Attribute": [
                      {
                          "AttributeId": "urn:altinn:resource",
                          "Value": "devtest_gar_bruno_accesslist"
                      },
                      {
                          "AttributeId": "urn:altinn:organization:identifier-no",
                          "Value": "313776735",
                          "DataType": "http://www.w3.org/2001/XMLSchema#string"
                      }
                  ]
              }
          ]
      }
  }
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  var getTokenParameters = {
    auth_tokenType: sharedtestdata.authTokenType.enterprise,
    auth_scopes: sharedtestdata.auth_scopes.authorize,
    auth_org: sharedtestdata.serviceOwners.ttd.org,
    auth_orgNo: sharedtestdata.serviceOwners.ttd.orgno,
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

script:post-response {
  //console.log("request url (after): " + req.getUrl());
}

tests {
  test("POST Authorize AccessList_AC1_Permit result", function() {
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.response[0]).to.have.property('decision', "Permit");
  });
}

docs {
  Issue:
  https://github.com/Altinn/altinn-access-management/issues/748
  
  Acceptance Criteria:
  AC1 - Avgiver med Tilgangssliste tilgang uten action filter - Permit
  
  GITT en bruker med tilgang til ressurs for avgiver gjennom rolle eller enkeltdelegering
  NÅR ressursen krever tilgangsliste autorisasjon
  OG avgiver er medlem av minst en tilgangsliste som er knytt til ressursen
  OG tilgangslisten for ressursen ikke har noe action filter begrensning for gitte actions
  SÅ skal bruker få Permit
  
  Scenario/Testdata setup:
  The user is DAGL for the party. The party have access list membership for the resource without action filter.
}
